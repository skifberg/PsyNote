from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import sys
from pathlib import Path
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="PsyNote",
    description="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±–æ–π",
    version="1.0.0"
)

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º –∏ —à–∞–±–ª–æ–Ω–∞–º
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ë–î
HAS_DB_SERVICE = False
HAS_BIG5_MODULE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
try:
    from api.iching import router as iching_router
    app.include_router(iching_router, prefix="/api/iching", tags=["I Ching"])
    print("‚úÖ –ú–æ–¥—É–ª—å I Ching –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ I Ching: {e}")

try:
    from api.self_analysis import router as self_analysis_router
    app.include_router(self_analysis_router, prefix="/api/self-analysis", tags=["Self Analysis"])
    print("‚úÖ –ú–æ–¥—É–ª—å Self Analysis –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Self Analysis: {e}")

# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å Big Five –º–æ–¥—É–ª—å
try:
    from api.big5 import router as big5_router
    app.include_router(big5_router, prefix="/api/big5", tags=["Big Five Personality Test"])
    HAS_BIG5_MODULE = True
    print("‚úÖ –ú–æ–¥—É–ª—å Big Five –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Big Five: {e}")
    print("‚ö†Ô∏è  Big Five —Ç–µ—Å—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from services.database_service import DatabaseService
    HAS_DB_SERVICE = True
    print("‚úÖ –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ –ë–î: {e}")
    print("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ë–î –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ PsyNote...")
    
    if HAS_DB_SERVICE:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        try:
            success = await DatabaseService.initialize_database()
            if success:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    print("üîÑ –ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ Big Five...")
                    import_result = await DatabaseService.import_ipip_items()
                    if import_result:
                        print("‚úÖ –í–æ–ø—Ä–æ—Å—ã Big Five –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
                    else:
                        print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É)")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            else:
                print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ë–î)")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ë–î")
    else:
        print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")

# Basic routes
@app.get("/")
async def read_root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å Decision Gate"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/iching")
async def iching_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ö–Ω–∏–≥–∏ –ü–µ—Ä–µ–º–µ–Ω"""
    return templates.TemplateResponse("iching.html", {"request": request})

@app.get("/self-analysis")
async def self_analysis_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥—É–ª—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞"""
    return templates.TemplateResponse("self_analysis.html", {"request": request})

@app.get("/psychometrics")
async def psychometrics_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Å–∏—Ö–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    return templates.TemplateResponse("psychometrics.html", {"request": request})

@app.get("/big5-test")
async def big5_test_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∞ Big Five"""
    if not HAS_BIG5_MODULE:
        return templates.TemplateResponse("error.html", {
            "request": request,
            "error_message": "–ú–æ–¥—É–ª—å Big Five –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        }, status_code=503)
    
    return templates.TemplateResponse("big5_test.html", {"request": request})

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    modules = ["iching", "self_analysis", "psychometrics"]
    if HAS_BIG5_MODULE:
        modules.append("big5")
    
    return {
        "status": "healthy", 
        "service": "PsyNote",
        "version": "1.0.0",
        "modules": modules,
        "database": "available" if HAS_DB_SERVICE else "not_configured",
        "big5": "available" if HAS_BIG5_MODULE else "not_configured"
    }

# –ù–æ–≤—ã–µ API endpoints –¥–ª—è Big Five
@app.get("/api/big5/status")
async def big5_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Big Five –º–æ–¥—É–ª—è"""
    return {
        "available": HAS_BIG5_MODULE,
        "database_available": HAS_DB_SERVICE,
        "message": "Big Five —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" if HAS_BIG5_MODULE and HAS_DB_SERVICE 
                  else "Big Five —Ç–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }

# Error handlers
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return templates.TemplateResponse("404.html", {"request": request}, status_code=404)

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    return templates.TemplateResponse("500.html", {"request": request}, status_code=500)

@app.exception_handler(503)
async def service_unavailable_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 503 –æ—à–∏–±–æ–∫ (—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"""
    return templates.TemplateResponse("error.html", {
        "request": request,
        "error_message": "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }, status_code=503)

if __name__ == "__main__":
    import uvicorn
    print("üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:8000")
    print("üìä –ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å: http://localhost:8000/api/health")
    print("üß™ Big Five —Ç–µ—Å—Ç: http://localhost:8000/big5-test")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)