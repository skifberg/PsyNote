class PsychometricsApp {
    constructor() {
        this.currentTest = null;
        console.log("PsychometricsApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        this.init();
    }

    async init() {
        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤...");
        await this.loadTests();
        this.setupEventListeners();
    }

    async loadTests() {
        try {
            console.log("–ó–∞–ø—Ä–æ—Å –∫ API...");
            const response = await fetch('/api/psychometrics/tests');
            console.log("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:", response.status);
            
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }
            
            const tests = await response.json();
            console.log("–¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", tests);
            this.renderTests(tests);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç—ã: ' + error.message);
        }
    }

    renderTests(tests) {
        const container = document.getElementById('tests-container');
        
        if (!tests || tests.length === 0) {
            container.innerHTML = `
                <div class="error">
                    <p>–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    <button onclick="app.loadTests()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
            return;
        }

        container.innerHTML = '';
        tests.forEach(test => {
            const card = document.createElement('div');
            card.className = 'test-card';
            card.innerHTML = `
                <h3>${test.name}</h3>
                <p>${test.description}</p>
                <div class="test-meta">
                    <span class="question-count">üìù ${test.question_count} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                </div>
                <button class="test-button" onclick="app.startTest('${test.id}')">
                    üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
                </button>
            `;
            container.appendChild(card);
        });
    }

    async startTest(testId) {
        try {
            console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞:", testId);
            const response = await fetch(`/api/psychometrics/tests/${testId}`);
            console.log("–û—Ç–≤–µ—Ç —Ç–µ—Å—Ç–∞, —Å—Ç–∞—Ç—É—Å:", response.status);
            
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }
            
            this.currentTest = await response.json();
            console.log("–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:", this.currentTest);
            this.showTest();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç: ' + error.message);
        }
    }

    showTest() {
        this.hideAllSections();
        document.getElementById('test-section').classList.remove('hidden');
        
        document.getElementById('test-title').textContent = this.currentTest.name;
        document.getElementById('test-description').textContent = this.currentTest.description;
        
        const questionsContainer = document.getElementById('questions-container');
        questionsContainer.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        if (this.currentTest.instructions) {
            const instructionsDiv = document.createElement('div');
            instructionsDiv.className = 'instruction-box';
            instructionsDiv.innerHTML = `
                <h4>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ —Ç–µ—Å—Ç—É:</h4>
                <p>${this.currentTest.instructions}</p>
                <div class="instruction-note">
                    <strong>üí° –í–∞–∂–Ω–æ:</strong> –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ, –≤—ã–±–∏—Ä–∞—è –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ 
                    –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏.
                </div>
            `;
            questionsContainer.appendChild(instructionsDiv);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        this.currentTest.questions.forEach(question => {
            const questionDiv = document.createElement('div');
            questionDiv.className = 'question';
            questionDiv.innerHTML = `
                <h4>${question.id}. ${question.text}</h4>
                <div class="options">
                    ${question.options.map(option => `
                        <label class="option-label">
                            <input type="radio" name="question_${question.id}" value="${option.value}" required>
                            ${option.text}
                        </label>
                    `).join('')}
                </div>
            `;
            questionsContainer.appendChild(questionDiv);
        });
    }

    async submitTest(event) {
        event.preventDefault();
        
        const answers = [];
        this.currentTest.questions.forEach(question => {
            const selected = document.querySelector(`input[name="question_${question.id}"]:checked`);
            if (selected) {
                answers.push({
                    question_id: question.id,
                    value: parseInt(selected.value)
                });
            }
        });
        
        if (answers.length !== this.currentTest.questions.length) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã');
            return;
        }
        
        try {
            const response = await fetch(`/api/psychometrics/tests/${this.currentTest.id}/submit`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    test_id: this.currentTest.id,
                    answers: answers
                })
            });
            
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }
            
            const results = await response.json();
            console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", results);
            this.showResults(results);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞: ' + error.message);
        }
    }

    showResults(results) {
        document.getElementById('test-container').style.display = 'none';
        document.getElementById('results-container').style.display = 'block';
        
        const resultsContent = document.getElementById('results-content');
        resultsContent.innerHTML = `
            <div class="result-card">
                <h3>${results.test_name}</h3>
                <p class="score">–ë–∞–ª–ª—ã: ${results.score} –∏–∑ ${results.max_score}</p>
                
                <div class="interpretation">
                    <h4>${results.interpretation.result}</h4>
                    <p>${results.interpretation.description}</p>
                </div>
                
                ${results.interpretation.recommendations && results.interpretation.recommendations.length ? `
                    <div class="recommendations">
                        <h5>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h5>
                        <ul>
                            ${results.interpretation.recommendations.map(rec => 
                                `<li>${rec}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
                
                <div class="disclaimer">
                    <h5>‚ö†Ô∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h5>
                    <p>–≠—Ç–æ—Ç —Ç–µ—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É. 
                    –ï—Å–ª–∏ –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É –∏–ª–∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É 
                    –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–º–æ—â–∏.</p>
                    <p class="disclaimer-note">
                        <strong>–ü–æ–º–Ω–∏—Ç–µ:</strong> –î–µ–ø—Ä–µ—Å—Å–∏—è - —ç—Ç–æ treatable —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å 
                        –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏.
                    </p>
                </div>
                
                <div class="resources">
                    <h5>üìû –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</h5>
                    <ul>
                        <li>–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)</li>
                        <li>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: 112</li>
                        <li>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É —Ç–µ—Ä–∞–ø–µ–≤—Ç—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É</li>
                    </ul>
                </div>
            </div>
        `;
    }

    showError(message) {
        const container = document.getElementById('tests-container');
        container.innerHTML = `
            <div class="error">
                <p>${message}</p>
                <button onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
            </div>
        `;
    }

    hideAllSections() {
        document.getElementById('tests-section').classList.add('hidden');
        document.getElementById('test-section').classList.add('hidden');
        document.getElementById('results-section').classList.add('hidden');
    }

    setupEventListeners() {
        const form = document.getElementById('test-form');
        if (form) {
            form.addEventListener('submit', (e) => this.submitTest(e));
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    window.app = new PsychometricsApp();
});