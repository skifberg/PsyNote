from fastapi import APIRouter, HTTPException
import json
from pathlib import Path
from typing import List, Optional
import logging

router = APIRouter()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–µ—Å—Ç–∞–º–∏
TESTS_FILE = Path("data/psychometric_tests.json")

def get_default_tests():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    return {
        "tests": [
            {
                "id": "big5",
                "name": "–¢–µ—Å—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ Big Five",
                "description": "–ù–∞—É—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏",
                "category": "personality",
                "estimated_time": 20,
                "questions_count": 100,
                "active": True,
                "version": "1.0",
                "image": "üß†"
            },
            {
                "id": "phq9",
                "name": "PHQ-9: –û—Ü–µ–Ω–∫–∞ –¥–µ–ø—Ä–µ—Å—Å–∏–∏",
                "description": "–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤",
                "category": "mood",
                "estimated_time": 5,
                "questions_count": 9,
                "active": True,
                "version": "1.0",
                "image": "üòî"
            },
            {
                "id": "gad7",
                "name": "GAD-7: –®–∫–∞–ª–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏",
                "description": "–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏ –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏",
                "category": "anxiety",
                "estimated_time": 3,
                "questions_count": 7,
                "active": True,
                "version": "1.0",
                "image": "üò∞"
            }
        ]
    }

class TestConfig:
    @staticmethod
    def load_tests():
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤"""
        try:
            if not TESTS_FILE.exists():
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_tests = get_default_tests()
                with open(TESTS_FILE, 'w', encoding='utf-8') as f:
                    json.dump(default_tests, f, ensure_ascii=False, indent=2)
                return default_tests
            
            with open(TESTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤: {str(e)}")
            return get_default_tests()
    
    @staticmethod
    def save_tests(data):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤"""
        try:
            with open(TESTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {str(e)}")
            return False

@router.get("/tests")
async def get_available_tests(all: bool = False):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        data = TestConfig.load_tests()
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç—ã: {data}")
        
        if all:
            return data['tests']
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
            active_tests = [test for test in data['tests'] if test.get('active', True)]
            return active_tests
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_available_tests: {str(e)}")
        return get_default_tests()['tests']

@router.get("/categories")
async def get_test_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤"""
    try:
        data = TestConfig.load_tests()
        categories = list(set(test['category'] for test in data['tests']))
        return {"categories": categories}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_test_categories: {str(e)}")
        return {"categories": ["personality", "mood", "anxiety"]}

# –ü—Ä–æ—Å—Ç—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è"""
    return {"status": "healthy", "module": "psychometrics"}

@router.get("/debug")
async def debug_info():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    data = TestConfig.load_tests()
    return {
        "file_exists": TESTS_FILE.exists(),
        "tests_count": len(data['tests']),
        "tests": data['tests']
    }