import sqlite3
import os
import logging
from pathlib import Path
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class Database:
    def __init__(self):
        self.db_path = os.getenv('DB_PATH', 'data/psynote.db')
        self.conn = None

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
            
            self.conn = sqlite3.connect(self.db_path)
            self.conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.db_path}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")
            return False

    async def create_tables(self):
        """–°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ SQLite"""
        if not self.conn:
            await self.connect()
        
        try:
            cursor = self.conn.cursor()

            # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ Big Five
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS items (
                    item_id TEXT PRIMARY KEY,
                    text TEXT NOT NULL,
                    domain TEXT NOT NULL,
                    facet TEXT NOT NULL,
                    keyed_direction TEXT NOT NULL CHECK (keyed_direction IN ('plus', 'minus')),
                    param_a REAL DEFAULT NULL,
                    param_b REAL DEFAULT NULL,
                    param_c REAL DEFAULT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    session_id TEXT UNIQUE NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_responses (
                    response_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
                    item_id TEXT REFERENCES items(item_id) ON DELETE CASCADE,
                    score INTEGER NOT NULL CHECK (score BETWEEN 1 AND 5),
                    response_time INTEGER,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE (user_id, item_id)
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS test_results (
                    result_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
                    test_type TEXT NOT NULL DEFAULT 'big5',
                    extraversion REAL,
                    agreeableness REAL,
                    conscientiousness REAL,
                    neuroticism REAL,
                    openness REAL,
                    completed_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_items_domain ON items(domain)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_responses_user_id ON user_responses(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_responses_item_id ON user_responses(item_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_test_results_user_id ON test_results(user_id)')

            self.conn.commit()
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã SQLite —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü SQLite: {e}")
            return False

    async def execute(self, query, params=None):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å"""
        try:
            cursor = self.conn.cursor()
            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)
            self.conn.commit()
            return cursor
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

    async def fetchall(self, query, params=None):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏"""
        cursor = await self.execute(query, params)
        return cursor.fetchall() if cursor else []

    async def fetchone(self, query, params=None):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
        cursor = await self.execute(query, params)
        return cursor.fetchone() if cursor else None

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.conn:
            self.conn.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î
db = Database()