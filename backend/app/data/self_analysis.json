from fastapi import APIRouter, HTTPException
import json
from pathlib import Path

router = APIRouter(prefix="/api/self-analysis", tags=["self_analysis"])

def load_self_analysis_data():
    """Загрузка данных модуля самоанализа"""
    try:
        data_path = Path(__file__).parent.parent / "data" / "self_analysis.json"
        with open(data_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        # Возвращаем демо-данные если файл не найден
        return {
            "modules": [
                {
                    "id": "demo",
                    "name": "Демо-модуль",
                    "description": "Пример модуля самоанализа",
                    "techniques": []
                }
            ]
        }

@router.get("/modules")
async def get_all_modules():
    """Получить все модули самоанализа"""
    return load_self_analysis_data()

@router.get("/module/{module_id}")
async def get_module(module_id: str):
    """Получить конкретный модуль по ID"""
    data = load_self_analysis_data()
    for module in data['modules']:
        if module['id'] == module_id:
            return module
    raise HTTPException(status_code=404, detail="Модуль не найден")

@router.get("/technique/{module_id}/{technique_id}")
async def get_technique(module_id: str, technique_id: str):
    """Получить конкретную технику"""
    data = load_self_analysis_data()
    for module in data['modules']:
        if module['id'] == module_id:
            for technique in module['techniques']:
                if technique['id'] == technique_id:
                    return technique
    raise HTTPException(status_code=404, detail="Техника не найдена")